version: "3.3"

services:

  traefik:
    image: "traefik:v2.8"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.mongodb.address=:27017"
      - "--entrypoints.ws.address=:8083"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=egortsaryk@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
      - "27017:27017"
    volumes:
      - "letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"


  substrate-node:
    image: deipworld/appchain-deip:latest
    container_name: substrate-node
    restart: always
    command: appchain-deip --dev --ws-external --rpc-external --rpc-methods=Unsafe --rpc-cors=all --base-path=/var/lib/deipd
    expose:
      - "9944"
      - "9933"
    volumes:
      - chainstorage:/var/lib/deipd
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 2048M
        reservations:
          memory: 1024M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.node_ws.rule=Host(`demo.appchain.ws.casimir.one`)"
      - "traefik.http.routers.node_ws.entrypoints=websecure"
      - "traefik.http.routers.node_ws.tls.certresolver=myresolver"
      - "traefik.http.routers.node_ws.service=node_ws"
      - "traefik.http.services.node_ws.loadbalancer.server.port=9944"
      
      - "traefik.http.routers.node_http.rule=Host(`demo.appchain.http.casimir.one`)"
      - "traefik.http.routers.node_http.entrypoints=websecure"
      - "traefik.http.routers.node_http.tls.certresolver=myresolver"
      - "traefik.http.routers.node_http.service=node_http"
      - "traefik.http.services.node_http.loadbalancer.server.port=9933"


  web-server:
    image: deipworld/casimir-nft-marketplace-web-server:latest
    container_name: web-server
    restart: always
    depends_on:
      - substrate-node
      - storage
      - kafka
    links:
      - substrate-node
      - storage
      - kafka
    expose:
      - "80"
      - "8083"
    environment:
      NODE_ENV: development
      PROTOCOL: 2
      PORT: 80
      WS_PORT: 8083
      DEIP_FULL_NODE_URL: https://demo.appchain.http.casimir.one
      DEIP_MONGO_STORAGE_CONNECTION_URL: mongodb://casimir:xZ6GZunKhaUzX44J@demo.casimir.one:27017/casimir-storage?authSource=admin
      CORE_ASSET: '{ "id": 0, "symbol": "DEIP", "precision": 18 }'
      CHAIN_BLOCK_INTERVAL_MILLIS: 6000
      TENANT: "6561845613164402145092105428472817005070"
      TENANT_PRIV_KEY: "1d24d7eda9803457dcea233872d513f4468d41b7a8b77555c161be1d1917330c"
      TENANT_PORTAL: '{"privKey":"1265fe9c39e665908f2d6fda3f0371d34de255e4420eb0aaa2907a8d80836d99","pubKey":"22688b484f3e0dde55bd52221fd9ba806c8af5388e02543e14fbf3a639d4d825"}'
      TENANT_HOT_WALLET: '{"privKey":"38b6bf99e4b06e64cafeeedf1f418f8f03b472e14ece7f5e5cb4d9aa9e6caef7","daoId":"20d1c50067827d1ba447d1be4a4d5129fb0583ed"}'
      TENANT_FILE_STORAGE_TYPE: 1
      QUEUE_SERVICE: kafka
      KAFKA_CLIENT_ID: offchain
      KAFKA_BROKER_URLS: '["kafka:9092"]'
      KAFKA_APP_GROUP_ID: nft-marketplace-app-group-id
      KAFKA_CHAIN_GROUP_ID: nft-marketplace-chain-group-id
      KAFKA_APP_TOPIC: nft-marketplace-app-topic
      KAFKA_CHAIN_TOPIC: blockchain
      # KAFKA_USER=my-user
      # KAFKA_PASSWORD=zrQcU3Pux4c9
    volumes:
      - offchainstorage:/usr/src/app/files
      - logstorage:/usr/src/app/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.webserver_http.rule=Host(`demo.webserver.http.casimir.one`)"
      - "traefik.http.routers.webserver_http.entrypoints=websecure"
      - "traefik.http.routers.webserver_http.service=webserver_http"
      - "traefik.http.routers.webserver_http.tls.certresolver=myresolver"
      - "traefik.http.services.webserver_http.loadbalancer.server.port=80"

      # - "traefik.http.routers.webserver_https.rule=Host(`demo.webserver.ws.casimir.one`)"
      # - "traefik.http.routers.webserver_https.entrypoints=websecure"
      # - "traefik.http.routers.webserver_https.tls.certresolver=myresolver"
      # - "traefik.http.routers.webserver_https.service=webserver_https"
      # - "traefik.http.services.webserver_https.loadbalancer.server.port=8083"

      - traefik.tcp.routers.webserver_ws.entrypoints=ws
      - traefik.tcp.routers.webserver_ws.tls=true
      - traefik.tcp.routers.webserver_ws.tls.certresolver=myresolver
      - traefik.tcp.routers.webserver_ws.rule=HostSNI(`demo.webserver.ws.casimir.one`)
      - traefik.tcp.routers.webserver_ws.tls.domains[0].main=demo.webserver.ws.casimir.one
      - traefik.tcp.routers.webserver_ws.service=webserver_ws
      - traefik.tcp.services.webserver_ws.loadbalancer.server.port=8083


  web-client:
    image: deipworld/casimir-nft-marketplace-web-client:latest
    container_name: web-client
    restart: always
    depends_on:
      - substrate-node
      - web-server
    links:
      - substrate-node
      - web-server
    # ports:
    #   - "8080:80"
    environment:
      NODE_ENV: development
      PROTOCOL: 2
      TENANT: "6561845613164402145092105428472817005070"
      # web server ws and http
      DEIP_SERVER_URL: https://demo.webserver.http.casimir.one
      DEIP_WEB_SOCKET_URL: wss://demo.webserver.ws.casimir.one
      # chain node
      DEIP_FULL_NODE_URL: wss://demo.appchain.ws.casimir.one
      # wallet
      WALLET_URL: https://demo.wallet.casimir.one
      TENANT_HOT_WALLET_DAO_ID: '20d1c50067827d1ba447d1be4a4d5129fb0583ed'
      CORE_ASSET: '{ "id": 0, "symbol": "DEIP", "precision": 18 }'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.webclient.rule=Host(`demo.casimir.one`)"
      - "traefik.http.routers.webclient.entrypoints=websecure"
      - "traefik.http.routers.webclient.tls.certresolver=myresolver"
      - "traefik.http.routers.webclient.service=webclient"
      - "traefik.http.services.webclient.loadbalancer.server.port=80"


  storage:
    image: mongo:3.6.5
    container_name: storage
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=casimir
      - MONGO_INITDB_ROOT_PASSWORD=xZ6GZunKhaUzX44J
    volumes: 
      - offchainstorage:/data/db
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.storage.entrypoints=mongodb"
      - "traefik.tcp.routers.storage.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.storage.tls=false"
      - "traefik.tcp.services.storage.loadbalancer.server.port=27017"
      - "traefik.tcp.routers.storage.service=storage"

      # https://stackoverflow.com/questions/71300670/how-to-setup-mongodb-with-traefik-and-docker-compose
      # https://community.traefik.io/t/tls-with-letsencrypt-for-tcp-to-mongo/4957
      # - traefik.tcp.routers.storage.tls=true
      # - traefik.tcp.routers.storage.tls.certresolver=myresolver
      # - traefik.tcp.routers.storage.rule=HostSNI(`demo.storage.casimir.one`)
      # - traefik.tcp.routers.storage.tls.domains[0].main=demo.storage.casimir.one


  zookeeper:
    image: bitnami/zookeeper:3.7
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes


  kafka:
    image: bitnami/kafka:2
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper


  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    expose:
      - "8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=casimir
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kafkaui.rule=Host(`demo.kafka.casimir.one`)"
      - "traefik.http.routers.kafkaui.entrypoints=websecure"
      - "traefik.http.routers.kafkaui.tls.certresolver=myresolver"
      - "traefik.http.routers.kafkaui.service=kafkaui"
      - "traefik.http.services.kafkaui.loadbalancer.server.port=8080"


  deip-event-proxy:
   image: "deipworld/event-proxy"
   command: "event-proxy --config=/event-proxy.toml"
   environment:
     RUST_LOG: "error,librdkafka=error,rdkafka::client=error"
   volumes:
     - "./event-proxy.toml:/event-proxy.toml"
   depends_on:
     - kafka


  deip-event-proxy-client:
    image: "deipworld/event-proxy-client"
    command: "event-proxy-client"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    depends_on:
      - kafka


  web-wallet:
    image: deipworld/deip-web-wallet:latest
    container_name: web-wallet
    restart: always
    depends_on:
      - web-wallet-server
    links:
      - web-wallet-server
    expose:
      - "8080"
   #environment:
      # Envs are injected to static content :(
      #DW_API_URL: https://demo.wallet.webserver.casimir.one
      #DW_NETWORK: wss://demo.appchain.ws.casimir.one
      #DW_PROTOCOL: 2
      #DW_CORE_ASSET: '{ "id": 0, "symbol": "DEIP", "precision": 18 }'
      #DW_ACCOUNT_DEFAULT_FUNDING_AMOUNT: 1000000000000000000000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.webwallet.rule=Host(`demo.wallet.casimir.one`)"
      - "traefik.http.routers.webwallet.entrypoints=websecure"
      - "traefik.http.routers.webwallet.tls.certresolver=myresolver"
      - "traefik.http.routers.webwallet.service=webwallet"
      - "traefik.http.services.webwallet.loadbalancer.server.port=8080"


  web-wallet-server:
    image: deipworld/deip-web-wallet-server:latest
    container_name: web-wallet-server
    restart: always
    depends_on:
      - substrate-node
      - kafka
    links:
      - substrate-node
      - kafka
    expose:
      - "3001"
    environment:
      PORT: 3001
      MODE: development
      DW_PROTOCOL: 2
      DW_DB_URL: mongodb://casimir:xZ6GZunKhaUzX44J@demo.casimir.one:27017/deip-wallet?authSource=admin
      DW_DEIP_FULL_NODE_URL: https://demo.appchain.http.casimir.one
      DW_CORE_ASSET: '{ "id": 0, "symbol": "DEIP", "precision": 18 }'
      DW_DEIP_APPCHAIN_MILLISECS_PER_BLOCK: 6000
      # TODO: remove DW_TENANT_PORTAL
      DW_TENANT_PORTAL: '{ "pubKey": "ae5b2053e7ed4708eebdc5bc4af553f9c693fc7cf7caab08ec575336b6d53338", "privKey": "f013fcb52dbf677434d5960558880fd0bc0a9586423cd19b7be7c277916581a5" }'
      DW_KAFKA_CLIENT_ID: offchain
      DW_KAFKA_BROKER_URLS: '["kafka:9092"]'
      DW_KAFKA_APP_GROUP_ID: deip-wallet-group-id
      DW_KAFKA_CHAIN_GROUP_ID: deip-wallet-group-id
      DW_KAFKA_APP_TOPIC: deip-wallet-topic
      DW_KAFKA_CHAIN_TOPIC: blockchain
      DW_SENTRY_DSN: https://78783252fab34a6097e4016782548800@o1270391.ingest.sentry.io/6465321
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.webwalletserver.rule=Host(`demo.wallet.webserver.casimir.one`)"
      - "traefik.http.routers.webwalletserver.entrypoints=websecure"
      - "traefik.http.routers.webwalletserver.tls.certresolver=myresolver"
      - "traefik.http.routers.webwalletserver.service=webwalletserver"
      - "traefik.http.services.webwalletserver.loadbalancer.server.port=3001"


volumes:
  letsencrypt:
    external: true
  chainstorage:
    external: true
  offchainstorage:
    external: true
  logstorage:
    external: true
  zookeeper_data:
    external: true
  kafka_data:
    external: true
